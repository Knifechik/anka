// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go
//
// Generated by this command:
//
//	mockgen -source=grpc.go -destination mock.app.contracts_test.go -package grpc_test
//

// Package grpc_test is a generated GoMock package.
package grpc_test

import (
	context "context"
	reflect "reflect"

	app "github.com/ZergsLaw/back-template/cmd/twit/internal/app"
	dom "github.com/ZergsLaw/back-template/internal/dom"
	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// Mockapplication is a mock of application interface.
type Mockapplication struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationMockRecorder
}

// MockapplicationMockRecorder is the mock recorder for Mockapplication.
type MockapplicationMockRecorder struct {
	mock *Mockapplication
}

// NewMockapplication creates a new mock instance.
func NewMockapplication(ctrl *gomock.Controller) *Mockapplication {
	mock := &Mockapplication{ctrl: ctrl}
	mock.recorder = &MockapplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapplication) EXPECT() *MockapplicationMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *Mockapplication) Auth(ctx context.Context, token string) (*dom.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, token)
	ret0, _ := ret[0].(*dom.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockapplicationMockRecorder) Auth(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*Mockapplication)(nil).Auth), ctx, token)
}

// TwitDelete mocks base method.
func (m *Mockapplication) TwitDelete(ctx context.Context, session dom.Session, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwitDelete", ctx, session, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// TwitDelete indicates an expected call of TwitDelete.
func (mr *MockapplicationMockRecorder) TwitDelete(ctx, session, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwitDelete", reflect.TypeOf((*Mockapplication)(nil).TwitDelete), ctx, session, id)
}

// TwitGet mocks base method.
func (m *Mockapplication) TwitGet(ctx context.Context, session dom.Session, id uuid.UUID, limit, offset int) ([]app.Twit, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwitGet", ctx, session, id, limit, offset)
	ret0, _ := ret[0].([]app.Twit)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TwitGet indicates an expected call of TwitGet.
func (mr *MockapplicationMockRecorder) TwitGet(ctx, session, id, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwitGet", reflect.TypeOf((*Mockapplication)(nil).TwitGet), ctx, session, id, limit, offset)
}

// TwitPost mocks base method.
func (m *Mockapplication) TwitPost(ctx context.Context, session dom.Session, text string) (*app.Twit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwitPost", ctx, session, text)
	ret0, _ := ret[0].(*app.Twit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TwitPost indicates an expected call of TwitPost.
func (mr *MockapplicationMockRecorder) TwitPost(ctx, session, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwitPost", reflect.TypeOf((*Mockapplication)(nil).TwitPost), ctx, session, text)
}

// TwitUpdate mocks base method.
func (m *Mockapplication) TwitUpdate(ctx context.Context, session dom.Session, id uuid.UUID, text string) (*app.Twit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwitUpdate", ctx, session, id, text)
	ret0, _ := ret[0].(*app.Twit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TwitUpdate indicates an expected call of TwitUpdate.
func (mr *MockapplicationMockRecorder) TwitUpdate(ctx, session, id, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwitUpdate", reflect.TypeOf((*Mockapplication)(nil).TwitUpdate), ctx, session, id, text)
}
