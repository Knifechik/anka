// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/twit/v1/twit.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitAPIClient is the client API for TwitAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitAPIClient interface {
	// Saves user's twit
	TwitPost(ctx context.Context, in *TwitPostRequest, opts ...grpc.CallOption) (*TwitPostResponse, error)
	// Return twit to user by id
	TwitGet(ctx context.Context, in *TwitGetRequest, opts ...grpc.CallOption) (*TwitGetResponse, error)
	// Update twit by id
	TwitUpdate(ctx context.Context, in *TwitUpdateRequest, opts ...grpc.CallOption) (*TwitUpdateResponse, error)
	// Delete twit by id
	TwitDelete(ctx context.Context, in *TwitDeleteRequest, opts ...grpc.CallOption) (*TwitDeleteResponse, error)
}

type twitAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitAPIClient(cc grpc.ClientConnInterface) TwitAPIClient {
	return &twitAPIClient{cc}
}

func (c *twitAPIClient) TwitPost(ctx context.Context, in *TwitPostRequest, opts ...grpc.CallOption) (*TwitPostResponse, error) {
	out := new(TwitPostResponse)
	err := c.cc.Invoke(ctx, "/api.twit.v1.TwitAPI/TwitPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitAPIClient) TwitGet(ctx context.Context, in *TwitGetRequest, opts ...grpc.CallOption) (*TwitGetResponse, error) {
	out := new(TwitGetResponse)
	err := c.cc.Invoke(ctx, "/api.twit.v1.TwitAPI/TwitGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitAPIClient) TwitUpdate(ctx context.Context, in *TwitUpdateRequest, opts ...grpc.CallOption) (*TwitUpdateResponse, error) {
	out := new(TwitUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.twit.v1.TwitAPI/TwitUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitAPIClient) TwitDelete(ctx context.Context, in *TwitDeleteRequest, opts ...grpc.CallOption) (*TwitDeleteResponse, error) {
	out := new(TwitDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.twit.v1.TwitAPI/TwitDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitAPIServer is the server API for TwitAPI service.
// All implementations must embed UnimplementedTwitAPIServer
// for forward compatibility
type TwitAPIServer interface {
	// Saves user's twit
	TwitPost(context.Context, *TwitPostRequest) (*TwitPostResponse, error)
	// Return twit to user by id
	TwitGet(context.Context, *TwitGetRequest) (*TwitGetResponse, error)
	// Update twit by id
	TwitUpdate(context.Context, *TwitUpdateRequest) (*TwitUpdateResponse, error)
	// Delete twit by id
	TwitDelete(context.Context, *TwitDeleteRequest) (*TwitDeleteResponse, error)
	mustEmbedUnimplementedTwitAPIServer()
}

// UnimplementedTwitAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTwitAPIServer struct {
}

func (UnimplementedTwitAPIServer) TwitPost(context.Context, *TwitPostRequest) (*TwitPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitPost not implemented")
}
func (UnimplementedTwitAPIServer) TwitGet(context.Context, *TwitGetRequest) (*TwitGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitGet not implemented")
}
func (UnimplementedTwitAPIServer) TwitUpdate(context.Context, *TwitUpdateRequest) (*TwitUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitUpdate not implemented")
}
func (UnimplementedTwitAPIServer) TwitDelete(context.Context, *TwitDeleteRequest) (*TwitDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitDelete not implemented")
}
func (UnimplementedTwitAPIServer) mustEmbedUnimplementedTwitAPIServer() {}

// UnsafeTwitAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitAPIServer will
// result in compilation errors.
type UnsafeTwitAPIServer interface {
	mustEmbedUnimplementedTwitAPIServer()
}

func RegisterTwitAPIServer(s grpc.ServiceRegistrar, srv TwitAPIServer) {
	s.RegisterService(&TwitAPI_ServiceDesc, srv)
}

func _TwitAPI_TwitPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitAPIServer).TwitPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.twit.v1.TwitAPI/TwitPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitAPIServer).TwitPost(ctx, req.(*TwitPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitAPI_TwitGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitAPIServer).TwitGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.twit.v1.TwitAPI/TwitGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitAPIServer).TwitGet(ctx, req.(*TwitGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitAPI_TwitUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitAPIServer).TwitUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.twit.v1.TwitAPI/TwitUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitAPIServer).TwitUpdate(ctx, req.(*TwitUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitAPI_TwitDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitAPIServer).TwitDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.twit.v1.TwitAPI/TwitDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitAPIServer).TwitDelete(ctx, req.(*TwitDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitAPI_ServiceDesc is the grpc.ServiceDesc for TwitAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.twit.v1.TwitAPI",
	HandlerType: (*TwitAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TwitPost",
			Handler:    _TwitAPI_TwitPost_Handler,
		},
		{
			MethodName: "TwitGet",
			Handler:    _TwitAPI_TwitGet_Handler,
		},
		{
			MethodName: "TwitUpdate",
			Handler:    _TwitAPI_TwitUpdate_Handler,
		},
		{
			MethodName: "TwitDelete",
			Handler:    _TwitAPI_TwitDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/twit/v1/twit.proto",
}
